// Code generated by go-bindata.
// sources:
// manifests/prometheus-rules.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsPrometheusRulesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x50\xc1\x6a\x23\x31\x0c\xbd\xcf\x57\x88\xdc\x27\xbb\xb9\x1a\xb2\x97\xb0\xe7\x5d\x1a\x68\x8f\x41\x71\x94\x19\x37\xb6\x65\x24\x4d\xda\xd2\xf6\xdf\x8b\x67\xa6\x21\x50\x28\x94\x56\x27\xc9\x7a\xef\xe9\x3d\x63\x09\xb7\x24\x1a\x38\x3b\x48\x9c\x83\xb1\x84\xdc\x2d\x3d\x0b\xb1\x2e\x3d\xa7\x5f\xe7\x55\x73\x0a\xf9\xe0\xe0\xbf\x70\x22\xeb\x69\xd0\x9b\x21\x52\x93\xc8\xf0\x80\x86\xae\x01\x88\xb8\xa7\xa8\xb5\x03\x28\x17\x98\x03\x8c\x24\x36\xbe\x0a\x47\x9a\xe7\x56\x86\x48\xda\x00\x64\x4c\xe4\xae\xf0\xed\xc7\xb5\x16\xf4\xe4\x80\x0b\x65\xed\xc3\xd1\x5a\x35\x16\xec\xa8\xd1\x42\xbe\xde\xeb\x84\x87\x32\x5e\x6e\x67\x3d\x35\x34\x9a\xa4\x96\xef\x52\x00\x63\x37\x19\x6c\x27\x1b\x0e\xfe\x6d\xb6\xbb\x0d\x95\x7e\x13\x07\x35\x92\xbf\x22\x2c\xdb\xca\x1e\x61\x00\x98\x33\x1b\x5a\xe0\x3c\x33\x6b\x25\x52\xc5\x8e\x1c\x54\x26\xf8\x89\x0a\x41\x21\x64\xa0\xaa\x30\x19\x98\xf1\xf4\x58\xc4\xc1\xcb\x85\xed\xa9\xf4\xbb\x9e\x30\x5a\xbf\xab\xb8\x41\x9f\xef\x79\xbf\x5e\x08\xf3\xa9\xad\xcb\x36\x75\xb2\x78\x85\x3f\xb0\x9a\x39\x47\x16\x07\xab\xdf\x69\x1e\xaf\x7f\xba\x96\xd2\x99\x24\xd8\x93\x03\x2f\xc1\x82\xc7\xf8\x69\xc6\x3b\x94\x1c\x72\xf7\xad\x94\x0f\x93\xc6\x8f\xe4\x5c\xaf\xbf\x1e\x74\xbe\xdf\xbc\x05\x00\x00\xff\xff\xea\x38\xd5\x58\xbb\x02\x00\x00")

func manifestsPrometheusRulesYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsPrometheusRulesYaml,
		"manifests/prometheus-rules.yaml",
	)
}

func manifestsPrometheusRulesYaml() (*asset, error) {
	bytes, err := manifestsPrometheusRulesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/prometheus-rules.yaml", size: 699, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/prometheus-rules.yaml": manifestsPrometheusRulesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": &bintree{nil, map[string]*bintree{
		"prometheus-rules.yaml": &bintree{manifestsPrometheusRulesYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

