// Code generated by go-bindata.
// sources:
// jsonnet/manifests/ceph-prometheus-rules.yaml
// jsonnet/manifests/gluster-prometheus-rules.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsonnetManifestsCephPrometheusRulesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5b\x6f\x13\x4b\x12\x7e\xcf\xaf\x28\x59\x20\xec\x5d\xc7\xc4\xa0\x48\x30\x22\x48\x28\x61\x2f\x12\x49\xd8\x84\xdd\x7d\x58\xad\x46\xe5\xee\xf2\x4c\xe3\x9e\xae\xa1\xbb\xc7\xc1\x70\xfc\xdf\x8f\xba\x67\x7c\x0b\x71\x62\x3b\x86\x87\x73\xf2\x94\xe9\x4b\x55\xf9\xfb\xea\xda\x58\xaa\xff\x90\x75\x8a\x4d\x02\x05\x1b\xe5\xd9\x2a\x93\xf5\x04\x5b\x62\xd7\x13\x5c\x3c\x1f\xf7\x0f\x46\xca\xc8\x04\x3e\x5a\x2e\xc8\xe7\x54\xb9\xab\x4a\xd3\x41\x41\x1e\x25\x7a\x4c\x0e\x00\x34\x0e\x48\xbb\xf0\x1f\x40\x39\x3f\x96\xc0\xe8\x95\x8b\x6b\x96\x35\x25\x80\x9a\xac\x3f\xb4\x95\xa6\xb0\x6a\xb0\xa0\x64\xe9\xf4\xa1\xa0\x32\x5f\xd9\x75\x25\x0a\x4a\x40\xd2\x10\x2b\xed\x0f\x5c\x49\x22\xa8\xc8\x2c\x57\x65\x54\x76\xd8\x08\x89\x37\x8b\xcc\x1e\x3a\x8f\xbe\x6a\x54\x06\x41\xb5\x45\x87\xb5\xe6\x04\x4e\xa9\xcc\xcf\x33\xfb\x4f\xf7\x6e\xe0\xc8\xf8\xb8\x09\x80\xc6\xb0\x47\xaf\xd8\x34\xe7\xc3\x9f\x24\x27\xac\x2a\x7d\x04\x26\xdc\x83\x73\x34\x98\x91\x85\x1c\x1d\x48\xe5\xb0\x2c\x09\x2d\x49\x18\x5a\x2e\x96\xb0\x01\x8f\x36\x23\x1f\x8e\x08\x1e\x93\x9d\xf4\xe6\x32\x0b\x72\x0e\x33\x4a\xe0\xda\xb3\xc5\x8c\xa0\x20\x6f\x95\x70\x20\x58\x6b\x12\x9e\x2d\x38\xb2\x63\x25\x08\x0c\x7b\xc0\x31\x2a\x8d\x03\x4d\x80\x66\x52\xb0\xa5\x85\x24\x47\x63\xb2\xca\x4f\x52\x4d\x63\xd2\x09\xdc\xa0\x35\xca\x64\x8b\xfd\x5a\x41\xea\x27\x65\x03\x4f\xb3\x45\x5f\x4b\x9b\xc0\x6f\xf3\x83\x18\x81\x68\x57\xe5\xf7\xcf\x3c\x38\x69\x59\xe6\xd1\xe1\x0c\xcd\xd6\x14\x4e\x4e\xa0\xdf\x69\x0e\x0f\xd9\x26\x70\x5c\x34\x5f\xcb\x8c\x2f\x5b\xb4\x6a\xcb\x8f\xc8\x9f\x2b\xe7\x94\xc9\xae\xa8\xd4\x4a\xa0\xdb\x8d\x02\xe5\xa0\xa8\xe5\x80\x6d\x04\xed\x84\xb2\x64\x72\xe6\x99\x87\x1c\xc7\x04\x96\xbe\x54\x2a\x10\x6a\x18\x78\x78\x87\xe0\xbd\x81\xee\xaa\x62\x1d\xe2\x1d\x78\x03\xfd\x9d\x01\x9f\xc5\xc3\x97\x8a\x6d\x55\x1c\x46\xec\x7b\xb3\x88\xba\x27\x24\xd8\xfc\x2b\xde\x78\xe7\xaf\x94\x1b\x6d\xcc\xc9\x0c\x60\xa1\x2b\xe7\xc9\x36\x6a\x03\x3b\x9a\x6f\x7a\x70\xca\xc6\xa3\xf0\x70\x5d\x95\x25\x5b\x7f\x0f\x43\xcd\x45\xf4\x60\x17\xfa\x7f\x04\x9c\xac\x65\xbb\x3d\xdc\x82\x2b\xe3\xdb\xe1\x40\x5a\xb0\x49\x6b\x65\x69\x9d\x2a\xee\x71\x7b\x78\x73\x02\xed\xf6\xad\xcb\xb3\xa4\xb7\x86\xbc\xa7\xf0\xa2\x03\x7f\xbd\x15\x33\xfd\x0d\x38\x14\x56\x79\x25\x50\xdf\x49\xce\x3f\x54\x96\x5f\x54\xc5\x80\xec\xe5\xf0\x03\xa1\x24\x7b\x9a\xa3\xc9\x68\xf3\xe8\x79\x56\x87\x4f\x9d\xdf\xa1\xf5\xfd\x3b\x3c\xa9\x6d\xe9\x7d\xe6\x01\x4c\xa7\xad\x04\x94\x71\x1e\x8d\x20\x58\xda\x9c\xad\xcd\x85\x02\x4c\xa7\x31\x01\x3a\x22\x13\x4f\x8e\x51\x57\x14\x56\x75\x34\x0c\x44\x6d\x19\x58\x12\x64\xbc\x9e\xf4\x9e\xad\xa7\xfd\xb4\xf1\x9b\xb9\xc0\x02\xcd\x64\xad\xa0\xfd\xc7\xa1\x45\x4f\x0b\x6a\x4d\x55\xa4\x14\x12\x44\xc0\xf1\x4e\x7e\xff\xd7\x3f\x2e\xfe\xdf\x81\xb7\xf0\x72\x99\xde\x97\x47\xbb\x84\x68\x94\x6a\x58\xd2\xc6\x51\x7a\xc1\x92\xce\xf8\xc6\x6c\x1d\x9e\x41\xcb\x32\xab\xf1\x7b\x3a\x85\x1b\x32\x1e\x24\xdf\x98\x1e\x7c\xd4\x84\x8e\x40\xe4\x24\x46\xe0\xf3\xfa\xce\x12\xeb\xaa\x28\x48\x2a\xf4\xa4\xef\x2b\x67\x0f\x2a\xda\x7b\x64\xd7\x0e\x94\x44\x0e\x83\xb6\x34\x68\x49\x3e\xb3\x32\xe9\xa8\x1a\x50\x08\xe4\xa3\x55\xae\xdc\x36\xa1\x38\x23\x8b\x9d\xdc\x98\xa6\xcb\xeb\xb3\x33\xe5\x46\x17\xec\xaf\xc8\x95\x6c\xe4\xc2\x35\x1f\xa6\x2c\xdc\x04\x49\xb1\x38\x2d\x01\xd9\xac\x4c\xa7\xb1\x2f\xb0\x73\xb9\x5d\x60\x03\x39\x3b\xbf\x7c\x38\x7c\xaf\x04\xec\x1d\x8c\x45\x3d\xab\xb2\xf6\xcd\x4d\xb4\x26\x0d\x55\x14\x05\xb5\xeb\x30\x63\x27\x53\x65\x62\x7a\x05\x34\x12\xe6\x8b\x55\x19\xa9\xea\x74\x5b\x52\xb9\x51\xab\xdb\x7a\xd2\x6f\x75\x5b\x71\x5b\x22\x15\x6c\x5a\xdd\x16\x3b\xd9\x6b\xf7\xfe\xd2\x69\x85\x0c\xcb\xa6\xbd\xb4\xdb\xa9\x7b\xc2\x54\xd3\xd0\xb7\xc3\xef\xef\x36\x20\x76\x6e\x99\x51\xdf\x51\x6e\x94\xb2\x10\x55\x19\xb9\xe8\xb6\xc2\x8d\x99\x4e\xfa\x1a\x6a\x15\x05\x3b\xeb\xdc\xd7\xea\xb6\x6a\xad\x2b\x29\xfd\x31\x19\xbd\xf1\x90\x7f\x9b\x79\x83\xb7\x5f\xff\x40\x21\xc8\x39\x15\x1a\xc7\xc7\xba\xc7\x42\xd4\xaf\x75\x8f\xa3\x3f\xb1\x7b\x9c\xa1\xc7\x2b\xaa\x67\x87\x4f\x38\x52\x26\xfb\xc4\xfc\x81\xb7\xc9\x22\xe8\x31\xd4\xcd\x28\x22\x56\xd7\x41\xa8\xae\x28\xbc\x1a\x53\xb0\x10\xc2\x34\x01\x3e\x47\x03\x2f\xf2\x4d\x1a\xb5\x55\x89\xca\x81\xd3\x7c\xb3\xff\x82\x1c\xf1\x2f\xb3\xb4\x32\x32\xcc\xa4\xdf\x48\xc2\xdb\xd5\x04\xfe\x22\xdf\x7d\xfe\xf8\xf8\xf7\x2b\x2a\x51\xd9\xdd\x40\xbd\x26\x3d\x84\x9c\x50\x03\x97\x64\xeb\xa3\xe0\xa3\x28\xf0\xcc\xa0\xd9\x64\x1b\xf5\xbc\x73\x39\xa5\xe5\x81\xa6\xc2\x81\x24\x4f\xc2\x93\xfc\x79\x80\x2a\x23\xd8\x38\xe5\x7c\xa8\xc4\xb7\x20\xed\x6f\x03\xe9\xbc\x7d\xa9\x2b\x6f\x1c\xb8\x37\x6f\x61\x9a\x86\xef\x7d\x48\x19\xd7\xe1\xe6\xce\xa3\x86\x72\xa0\x4c\x9d\x7b\x20\xda\x70\xcb\xad\xfb\x47\xc5\x3d\x8d\xca\x5a\x29\x7b\x6f\x50\x02\xfe\x81\x6c\x9f\xdf\x3b\x70\xbc\x5d\x1d\xfa\xfa\x1b\xb4\x94\xeb\x13\x48\x83\xf2\x7f\x6b\xd2\xf6\x81\x73\xc3\xff\xa3\x91\x96\x94\x59\x94\x24\x1f\x00\xfb\x71\xee\xbe\x01\xdc\xa1\x01\xd9\x16\xef\xb5\x69\xe5\xf2\xfa\xac\x79\x41\x3b\x57\xae\x40\x2f\xf2\x8d\xd1\xfe\x94\x93\x25\x40\x4b\xab\xa3\x94\x54\xc3\x21\xd9\x10\xaa\xe3\x5a\xb0\x03\x1e\xd6\x2f\x20\x97\xd7\x67\x20\xb8\x28\xd9\x90\xf1\x6e\xa9\x8e\xdb\xca\x04\xf3\xee\xa0\x62\xa1\xa4\xa8\xb4\x57\xa5\xa6\x15\xb1\x0d\xb8\xb3\x37\x11\xf7\xa3\xa4\xfd\xd1\x53\xcf\xd2\x8b\x89\x3a\xd4\xf6\x07\x26\xea\xc1\x04\xea\xb3\x8d\xcd\x9d\xce\x2e\xc1\xb2\xfe\x4d\x8a\xcd\xaf\x23\xef\x9c\xcd\x1f\x88\xbc\x0d\x9e\x43\xf6\x4d\xde\xed\xea\x53\x79\xa5\xd5\xb7\xc8\xd2\xb6\x35\xe8\x82\xd0\xfe\xad\xd2\x7a\xe7\xcc\xb8\xa4\x3b\xb6\x58\xc2\xb2\x73\x24\xe1\xd5\xf1\xd3\xcd\xf2\xa1\x21\xb4\x21\xa9\x0e\x2b\xad\x7b\xf0\xfe\x6b\x89\x26\x60\x14\xb6\x66\x4f\x91\x3f\xe9\xed\x71\x1e\x7b\x21\x47\xa6\x83\x89\x27\x97\x56\x8e\x64\x07\x9e\xaf\xdb\x0f\xc4\x1d\xf5\x5e\x1d\x2f\x73\xf7\x98\xb7\xe0\x86\x85\xd3\xa6\x88\xe9\xc9\x4f\xe1\xe2\xf5\xa6\x5c\x88\xb9\x1d\x91\x8e\x38\x7d\x18\x22\xe9\x16\x2f\x1f\x01\xc9\x9a\xa1\x7d\x37\x09\x8f\xa2\xe4\xf5\xb6\x94\xcc\xfb\x86\xdf\x03\x00\x00\xff\xff\x04\x31\xbb\xfa\xfa\x19\x00\x00")

func jsonnetManifestsCephPrometheusRulesYamlBytes() ([]byte, error) {
	return bindataRead(
		_jsonnetManifestsCephPrometheusRulesYaml,
		"jsonnet/manifests/ceph-prometheus-rules.yaml",
	)
}

func jsonnetManifestsCephPrometheusRulesYaml() (*asset, error) {
	bytes, err := jsonnetManifestsCephPrometheusRulesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jsonnet/manifests/ceph-prometheus-rules.yaml", size: 6650, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonnetManifestsGlusterPrometheusRulesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\x4d\x6f\xda\x4c\x10\xc7\xef\x7c\x8a\x51\xf4\x3c\x52\x5b\x09\x02\x95\x2a\x91\x95\xe8\xa1\x4a\xd5\x53\xa5\xaa\x2f\xb9\xa2\xc1\x9e\xc0\x36\xeb\xdd\xd5\xee\x98\x84\x52\x7f\xf7\x6a\x6d\x2f\x35\x21\x4e\x30\x49\x1a\x7c\x82\xd5\xfc\x67\x66\x7f\xf3\x02\x46\x2b\x2f\xc8\x79\x69\xb4\x80\xcc\x68\xc9\xc6\x49\x3d\x1f\x24\xc6\x91\xf1\x83\xc4\x64\xa7\xcb\x51\xef\x4a\xea\x54\xc0\x17\x67\x32\xe2\x05\xe5\xfe\x6b\xae\xa8\x97\x11\x63\x8a\x8c\xa2\x07\xa0\x70\x46\xca\x87\x4f\x00\x76\x63\x26\xe0\x6a\xec\xcb\x33\x67\x14\x09\x40\x45\x8e\xfb\x2e\x57\x14\x4e\x35\x66\x24\x1a\xd6\xfd\xb9\xca\x3d\x93\xdb\x32\xf0\x16\x13\x12\x90\xd2\x25\xe6\x8a\x7b\xde\x52\x12\xa2\xcc\x9d\xc9\x6d\x19\xaf\x5f\xfb\xa1\x1b\x6b\x5c\x50\xe3\xcc\x93\xe6\x2a\x6a\x70\x54\x25\xd5\xaf\x82\x0b\xf8\x54\x05\xf9\x58\x9b\x9f\x9b\x6b\x5d\x1a\x00\xa0\xd6\x86\x91\xa5\xd1\xb5\x26\x3c\x19\x79\x8f\x73\xda\xd1\xc1\x02\x3d\xa4\xd2\xa3\xb5\x84\x8e\x52\xb8\x74\x26\x6b\x10\x02\x46\x37\x27\x0e\x26\x89\x59\x92\x5b\x0d\x6a\x97\x74\x63\x9d\x80\xdf\x9b\x00\x55\xba\xaf\x72\xbb\xfe\x69\x66\x93\x93\x9a\x41\xfa\xb6\x9f\x28\x49\x9a\x4f\x8a\xc9\x64\xf4\xba\xb6\xbe\x34\x4e\xc0\xe8\x5d\x56\x7f\x6d\x42\x0f\x8f\xa7\x25\x39\xc9\x2b\x01\x89\x93\x2c\x13\x54\x0d\x3e\x9e\x91\x73\xdf\x2f\x29\x0c\x22\xe1\x7b\x11\x7d\x70\x32\xb9\xfa\x56\xca\xba\x10\x82\x52\x07\xeb\xf5\x7f\x55\x7e\x83\x85\xf1\x1c\x72\x28\x0a\xf1\xf7\x70\x16\x8c\xa6\x16\x79\x51\x14\x20\x3d\xa4\xe6\x5a\xb7\x21\xaa\x99\x4c\x2b\x4d\x3b\x29\x98\x4c\x60\xb8\x85\xaa\x13\xa9\x5d\x02\x17\x46\xe5\x19\x1d\x80\xa0\x12\x36\x18\x2c\xcb\x83\xfd\xaf\x5a\xd9\x3f\xdf\x5d\x63\x57\xc4\x91\xcb\x59\x2a\xf9\xab\xbc\xd7\x43\x6d\x51\xdd\xed\xc7\x2d\xc1\xe3\xc9\x34\x3c\x42\x66\x1c\x01\x2f\x50\xc3\x78\xf8\x7f\x0b\xaa\xd1\x70\x08\x6f\xe2\x05\x44\x0d\x2c\x41\x8b\x89\xe4\xd5\x34\xf7\x94\x4e\x67\x2b\x26\x3f\x65\xc3\xa8\x84\xcf\xb3\x8d\x34\x3c\xa7\xad\xd2\xd2\xbe\xd2\x06\x15\xbc\x87\xf1\x16\xe9\x3d\xe6\xef\x1a\x9d\x96\x7a\x7e\x04\xfc\xce\x8e\x81\xdf\x59\x57\x7e\xf7\x4e\x65\xb9\x5f\x0e\xe5\x77\xd7\x72\x6a\x5f\x4c\xbb\x51\x4a\xa7\x5d\xbb\xb3\xde\x5c\x77\xc0\x6d\x1b\xef\xbb\x51\xdf\xf6\xd3\xa8\x4f\xeb\x9e\x78\xe2\xee\x3d\x22\xf8\x7b\xb6\xf6\xcb\xc2\x7f\x4c\xeb\xc7\x25\xcd\x0b\xa9\xad\x31\xaa\xcb\x96\xfe\x5e\x6b\xce\x91\xf1\xd0\x72\x45\x1f\xb0\x5e\x43\xac\x50\xcc\x65\x1a\x52\x83\xa2\x80\x10\x60\x67\xf7\x34\x08\x3e\x30\x27\x11\xee\xc6\x6f\xf8\x47\xb9\x47\x8d\x1a\x75\xd9\x96\x36\xb6\xcf\x3d\x65\x19\x0e\xc6\x4f\x38\x14\xc7\x05\xbb\x7d\x2e\x5e\x0c\xf6\xd9\x53\xee\xff\x48\xea\x73\xfd\xfe\xf1\xac\xc4\x63\x90\x47\xfc\x14\xec\xa0\x8b\x2f\x4e\x07\x92\xdf\xc8\x5f\xb2\xd5\x8f\x0b\x7e\x87\x96\xff\xd7\xf0\x0f\x6e\xfd\x3f\x01\x00\x00\xff\xff\x63\x35\x6e\x54\x99\x0f\x00\x00")

func jsonnetManifestsGlusterPrometheusRulesYamlBytes() ([]byte, error) {
	return bindataRead(
		_jsonnetManifestsGlusterPrometheusRulesYaml,
		"jsonnet/manifests/gluster-prometheus-rules.yaml",
	)
}

func jsonnetManifestsGlusterPrometheusRulesYaml() (*asset, error) {
	bytes, err := jsonnetManifestsGlusterPrometheusRulesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jsonnet/manifests/gluster-prometheus-rules.yaml", size: 3993, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jsonnet/manifests/ceph-prometheus-rules.yaml": jsonnetManifestsCephPrometheusRulesYaml,
	"jsonnet/manifests/gluster-prometheus-rules.yaml": jsonnetManifestsGlusterPrometheusRulesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jsonnet": &bintree{nil, map[string]*bintree{
		"manifests": &bintree{nil, map[string]*bintree{
			"ceph-prometheus-rules.yaml": &bintree{jsonnetManifestsCephPrometheusRulesYaml, map[string]*bintree{}},
			"gluster-prometheus-rules.yaml": &bintree{jsonnetManifestsGlusterPrometheusRulesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

